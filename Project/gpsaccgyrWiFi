#include <Wire.h>
#include <MPU6050.h>
#include <SoftwareSerial.h>
#include <TinyGPSPlus.h>
#include <SPIFFS.h>     // For saving data to a file
#include <ArduinoJson.h> // For creating JSON data
#include <WiFi.h>
#include <PubSubClient.h> // For MQTT communication

#define GPS_RX_PIN 16 // ESP32 RX pin connected to GPS module TX pin
#define GPS_TX_PIN 17 // ESP32 TX pin connected to GPS module RX pin

SoftwareSerial gpsSerial(GPS_RX_PIN, GPS_TX_PIN);

TinyGPSPlus gps;
MPU6050 mpu;

unsigned long gpsBaud = 9600;
float lat, lon, a_x, a_y, a_z, g_x, g_y, g_z;

// WiFi and MQTT settings
const char* ssid = "@3";
const char* password = "amma1234";
const char* mqttServer = "35.244.2.253";
const int mqttPort = 1883;
const char* mqttUser = "pi";
const char* mqttPassword = "raspberry";
const char* mqttTopic = "gpsaccgyr";

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

void setup() {
  Serial.begin(9600);
  Wire.begin();

  mpu.initialize();
  mpu.setFullScaleAccelRange(2);
  mpu.setFullScaleGyroRange(250);
  mpu.setDLPFMode(3);
  gpsSerial.begin(gpsBaud);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  // Connect to MQTT broker
  mqttClient.setServer(mqttServer, mqttPort);
  mqttClient.setCallback(mqttCallback);
  while (!mqttClient.connected()) {
    if (mqttClient.connect("ESP32Client", mqttUser, mqttPassword)) {
      Serial.println("Connected to MQTT broker");
    } else {
      Serial.print("Failed to connect to MQTT broker, rc=");
      Serial.println(mqttClient.state());
      delay(2000);
    }
  }
}

void loop() {
  while (gpsSerial.available() > 0) {
    if (gps.encode(gpsSerial.read())) {
      if (gps.location.isValid()) {
        lat = gps.location.lat();
        lon = gps.location.lng();
      }
    }
  }

  int16_t ax, ay, az, gx, gy, gz;
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

  Serial.print("Accel (mg): ");
  Serial.print(ax);
  Serial.print("\t");
  Serial.print(ay);
  Serial.print("\t");
  Serial.println(az);

  Serial.print("Gyro (dps): ");
  Serial.print(gx);
  Serial.print("\t");
  Serial.print(gy);
  Serial.print("\t");
  Serial.println(gz);

  Serial.print("Latitude: ");
  Serial.print(lat, 6);
  Serial.print(", Longitude: ");
  Serial.println(lon, 6);

  // Create a JSON document
  StaticJsonDocument<200> doc;
  doc["latitude"] = lat;
  doc["longitude"] = lon;
  doc["accel_x"] = ax;
  doc["accel_y"] = ay;
  doc["accel_z"] = az;
  doc["gyro_x"] = gx;
  doc["gyro_y"] = gy;
  doc["gyro_z"] = gz;

  // Serialize JSON document to a string
  String jsonString;
  serializeJson(doc, jsonString);

  // Save JSON data to a file
  // File file = SPIFFS.open("/data.json", FILE_WRITE);
  // if (file) {
  //   file.println(jsonString);
  //   file.close();
  //   Serial.println("Data saved to file");
  // } else {
  //   Serial.println("Error opening file");
  // }

  // Publish JSON data to MQTT topic
  mqttClient.publish(mqttTopic, jsonString.c_str());

  // Handle MQTT communication
  mqttClient.loop();

  delay(1000);
}

void mqttCallback(char* topic, byte* payload, unsigned int length) {
  // Handle incoming MQTT messages if needed
}
